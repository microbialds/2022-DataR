{
  "hash": "949c9b52db6f303801092666b16893e0",
  "result": {
    "markdown": "---\ntitle: \"Workflow de análisis\"\n---\n\n\n# Introducción\n\nEn esta segunda clase, vamos a empezar el análisis con Tidyverse. Primero vamos a recordar como crear y establecer los directorios de trabajo. Luego vamos a explorar diferentes formas de leer datos desde diferentes tipos de tablas.\n\n## Establecer directorio de trabajo\n\nComo vimos durante la clase, necesitamos que R sepa en que directorio vamos a trabajar. Por ejemplo, si creamos un nuevo script, para saber en donde va a quedar guardado y además el directorio de trabajo, podemos ocupar el comando `getwd()`. Esto nos entrega el directrio de trabajo. Por ejemplo en mi caso es:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/jugalde/websites/courses/2022-DataR/clases\"\n```\n:::\n:::\n\n\nPara poder establecer el directorio de trabajo lo podemos hacer desde la interfaz de RStudio como vimos durante la clase, o tambien ocupando el comando `setwd()`. Por ejemplo:\n\n    setwd(\"/directorio/de/trabajo/\")\n\nMas detalles los iremos viendo durtante la clase\n\n## Leer datos en diferentes formatos\n\nEn esta sección vamos a ver como leer archivos y algunas operaciones básicas usando la libreria `Tidyverse`. Recuerda que antes de utilizar esta libreria hay que llamarla en el script o comandos previamente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n### Importar un archivo separado por comas (CSV)\n\nLos archivos CSV son archivos en donde cada columna esta separada por comas. Para poder leer este tipo de archivos, la libreria `readr` (que es parte del `Tidyverse`), tiene una función llamada `read_csv`. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Este comando va a leer un archivo csv y guardarlo en la variable gapminder\ngapminder <- read_csv(\"datos/gapminder.csv\")\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nEn este caso vemos que el archivo fue leido correctamente y consiste en 1704 observaciones en 6 columnas.\n\n### Importar archivos con diferentes formatos\n\nEn númerosas ocasiones nos vamos a encontrar con que los archivos que necesitamos leer, no vienen en el formato adecuado. Por ejemplo, si tratamos de leer este archivo con el comando `read_csv` nos damos cuenta que tenemos problemas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder2 <- read_csv(\"datos/gapminder_csv2.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, see `problems()` for details\n```\n:::\n\n```{.r .cell-code}\ngapminder2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 1\n   `country;continent;year;lifeExp;pop;gdpPercap`       \n   <chr>                                                \n 1 Afghanistan;Asia;1952;28,80100;   8425333;   779,4453\n 2 Afghanistan;Asia;1957;30,33200;   9240934;   820,8530\n 3 Afghanistan;Asia;1962;31,99700;  10267083;   853,1007\n 4 Afghanistan;Asia;1967;34,02000;  11537966;   836,1971\n 5 Afghanistan;Asia;1972;36,08800;  13079460;   739,9811\n 6 Afghanistan;Asia;1977;38,43800;  14880372;   786,1134\n 7 Afghanistan;Asia;1982;39,85400;  12881816;   978,0114\n 8 Afghanistan;Asia;1987;40,82200;  13867957;   852,3959\n 9 Afghanistan;Asia;1992;41,67400;  16317921;   649,3414\n10 Afghanistan;Asia;1997;41,76300;  22227415;   635,3414\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nEn este caso, vemos que al leer esta tabla, queda en una sola columna. Esto se debe a que la separación de las columnas no es con comas, si no que un caracter diferente (en este caso punto y coma). Para poder leer la tabla, tenemos que ocupar otro comando en donde definimos el tipo de delimitador que separa a las columnas. En este caso ocupamos la función `read_delim`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder2_fixed <- read_delim(\n    \"datos/gapminder_csv2.csv\",\n    delim = \";\"\n)\ngapminder2_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp pop          gdpPercap    \n   <chr>       <chr>     <dbl>   <dbl> <chr>        <chr>        \n 1 Afghanistan Asia       1952 2880100 \"   8425333\" \"   779,4453\"\n 2 Afghanistan Asia       1957 3033200 \"   9240934\" \"   820,8530\"\n 3 Afghanistan Asia       1962 3199700 \"  10267083\" \"   853,1007\"\n 4 Afghanistan Asia       1967 3402000 \"  11537966\" \"   836,1971\"\n 5 Afghanistan Asia       1972 3608800 \"  13079460\" \"   739,9811\"\n 6 Afghanistan Asia       1977 3843800 \"  14880372\" \"   786,1134\"\n 7 Afghanistan Asia       1982 3985400 \"  12881816\" \"   978,0114\"\n 8 Afghanistan Asia       1987 4082200 \"  13867957\" \"   852,3959\"\n 9 Afghanistan Asia       1992 4167400 \"  16317921\" \"   649,3414\"\n10 Afghanistan Asia       1997 4176300 \"  22227415\" \"   635,3414\"\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nEn otros casos, el formato de la tabla puede ser el adecuado, pero el archivo mismo incluir información que queremos ignorar al momento de importar los datos en R. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder3 <- read_csv(\"datos/gapminder_messier.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, see `problems()` for details\n```\n:::\n\n```{.r .cell-code}\ngapminder3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,706 × 1\n   `# Some comment about the data`                  \n   <chr>                                            \n 1 And maybe a personal note                        \n 2 country,continent,year,lifeExp,pop,gdpPercap     \n 3 Afghanistan,Asia,1952,28.801,8425333,779.4453145 \n 4 Afghanistan,Asia,1957,30.332,9240934,820.8530296 \n 5 Afghanistan,Asia,1962,31.997,10267083,853.10071  \n 6 Afghanistan,Asia,1967,34.02,11537966,836.1971382 \n 7 Afghanistan,Asia,1972,36.088,13079460,739.9811058\n 8 Afghanistan,Asia,1977,38.438,14880372,786.11336  \n 9 Afghanistan,Asia,1982,39.854,12881816,978.0114388\n10 Afghanistan,Asia,1987,40.822,13867957,852.3959448\n# … with 1,696 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nEn este caso, R entrega un mensaje de aviso, porque hay columna que no tienen el formato adecuado. Al ver el resultado, vemos que las dos primeras lineas contienen información como texto, pero no son parte de las columnas. En este caso podemos ignorar esas dos primeras filas al momento de leer el archivo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder3_fixed <- read_delim(\n    \"datos/gapminder_messier.csv\",\n    skip=2,\n    delim = \",\"\n)\ngapminder3_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n## Manipulación de tablas\n\nUna vez que tenemos la información en R, podemos ocupar diferentes funciones para explorar estos datos. Vamos usar la tabla gapminder\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nVemos que esta tabla tiene 6 columnas: - country - continent - year - lifeExp - pop - gdpPercap\n\n### `select`\n\nSi quisieramos elegir algunas columnas desde la tabla completa, podemos ocupar la función `select`. En este caso indicamos a la función la fuente de los datos ( *gapminder* ) y las columnas a elegir (country, year, pop)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(gapminder,\n       country, year, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 3\n   country      year      pop\n   <chr>       <dbl>    <dbl>\n 1 Afghanistan  1952  8425333\n 2 Afghanistan  1957  9240934\n 3 Afghanistan  1962 10267083\n 4 Afghanistan  1967 11537966\n 5 Afghanistan  1972 13079460\n 6 Afghanistan  1977 14880372\n 7 Afghanistan  1982 12881816\n 8 Afghanistan  1987 13867957\n 9 Afghanistan  1992 16317921\n10 Afghanistan  1997 22227415\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nTambién podemos elegir columnas en base a los nombres de estas. Por ejemplo seleccionar todas las columnas que parten con la letra *c*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(gapminder, starts_with(\"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country     continent\n   <chr>       <chr>    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n### `filter`\n\nAsi como `select` nos permite seleccionar columnas en base a los nombres, con el comando `filter` podemos seleccionar filas en base a los valores que estan presentes. Por ejemplo, podemos elegir todas los valores para el pais Chile:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder,\n       country == \"Chile\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 6\n   country continent  year lifeExp      pop gdpPercap\n   <chr>   <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Chile   Americas   1952    54.7  6377619     3940.\n 2 Chile   Americas   1957    56.1  7048426     4316.\n 3 Chile   Americas   1962    57.9  7961258     4519.\n 4 Chile   Americas   1967    60.5  8858908     5107.\n 5 Chile   Americas   1972    63.4  9717524     5494.\n 6 Chile   Americas   1977    67.1 10599793     4757.\n 7 Chile   Americas   1982    70.6 11487112     5096.\n 8 Chile   Americas   1987    72.5 12463354     5547.\n 9 Chile   Americas   1992    74.1 13572994     7596.\n10 Chile   Americas   1997    75.8 14599929    10118.\n11 Chile   Americas   2002    77.9 15497046    10779.\n12 Chile   Americas   2007    78.6 16284741    13172.\n```\n:::\n:::\n\n\nTambién podemos elegir varios paises a la vez, pasando un vector y ocupando el comando *%in%*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder,\n       country %in% c(\"Chile\", \"Argentina\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 6\n   country   continent  year lifeExp      pop gdpPercap\n   <chr>     <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Argentina Americas   1952    62.5 17876956     5911.\n 2 Argentina Americas   1957    64.4 19610538     6857.\n 3 Argentina Americas   1962    65.1 21283783     7133.\n 4 Argentina Americas   1967    65.6 22934225     8053.\n 5 Argentina Americas   1972    67.1 24779799     9443.\n 6 Argentina Americas   1977    68.5 26983828    10079.\n 7 Argentina Americas   1982    69.9 29341374     8998.\n 8 Argentina Americas   1987    70.8 31620918     9140.\n 9 Argentina Americas   1992    71.9 33958947     9308.\n10 Argentina Americas   1997    73.3 36203463    10967.\n# … with 14 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nY podemos combinar diferentes filtros ocupando operadores booleanos. En este caso seleccionando pais y un año.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder,\n       country %in% c(\"Chile\", \"Argentina\") & year > 2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n  country   continent  year lifeExp      pop gdpPercap\n  <chr>     <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n1 Argentina Americas   2002    74.3 38331121     8798.\n2 Argentina Americas   2007    75.3 40301927    12779.\n3 Chile     Americas   2002    77.9 15497046    10779.\n4 Chile     Americas   2007    78.6 16284741    13172.\n```\n:::\n:::\n\n\n### `mutate`\n\nAsi como podemos seleccionar valores y columnas, también podemos crear nuevas columnas usando otras. Por ejemplo, calculemos el gdp para cada fila:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(gapminder,\n       gdp = pop * gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap          gdp\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>        <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  6567086330.\n 2 Afghanistan Asia       1957    30.3  9240934      821.  7585448670.\n 3 Afghanistan Asia       1962    32.0 10267083      853.  8758855797.\n 4 Afghanistan Asia       1967    34.0 11537966      836.  9648014150.\n 5 Afghanistan Asia       1972    36.1 13079460      740.  9678553274.\n 6 Afghanistan Asia       1977    38.4 14880372      786. 11697659231.\n 7 Afghanistan Asia       1982    39.9 12881816      978. 12598563401.\n 8 Afghanistan Asia       1987    40.8 13867957      852. 11820990309.\n 9 Afghanistan Asia       1992    41.7 16317921      649. 10595901589.\n10 Afghanistan Asia       1997    41.8 22227415      635. 14121995875.\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nEn este caso creamos una nueva columna llamada *gdp* , la cual es el resultado de la multiplicacion de las columnas *pop* (población) y *gdpPercap* (el gdp per capita).\n\n### Combinando multiples funciones\n\nPodemos combinar diferentes funciones en un mismo pipeline ocupando el comando *%\\>%* para concatenar diferentes pasos. Asi, podemos combinar varias funciones. En este caso lo que vamos a hacer es tomar la tabla *gapminder*, aplicar un filtro, luego calcular una nueva columna y finalmente seleccionar columnas de interes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>%\n    filter(year > 2000) %>%\n    mutate(gdp = pop * gdpPercap) %>%\n    select(country, year, gdp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 284 × 3\n   country      year           gdp\n   <chr>       <dbl>         <dbl>\n 1 Afghanistan  2002  18363410424.\n 2 Afghanistan  2007  31079291949.\n 3 Albania      2002  16153932130.\n 4 Albania      2007  21376411360.\n 5 Algeria      2002 165447670333.\n 6 Algeria      2007 207444851958.\n 7 Angola       2002  30134833901.\n 8 Angola       2007  59583895818.\n 9 Argentina    2002 337223430800.\n10 Argentina    2007 515033625357.\n# … with 274 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nAl igual que veamis anteriormente, podemos tambien asignar los resultados de los análisis a una nueva variable, guardando asi los resultados. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_2000 <- gapminder %>%\n    filter(year > 2000) %>%\n    mutate(gdp = pop * gdpPercap) %>%\n    select(country, year, gdp)\ngdp_2000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 284 × 3\n   country      year           gdp\n   <chr>       <dbl>         <dbl>\n 1 Afghanistan  2002  18363410424.\n 2 Afghanistan  2007  31079291949.\n 3 Albania      2002  16153932130.\n 4 Albania      2007  21376411360.\n 5 Algeria      2002 165447670333.\n 6 Algeria      2007 207444851958.\n 7 Angola       2002  30134833901.\n 8 Angola       2007  59583895818.\n 9 Argentina    2002 337223430800.\n10 Argentina    2007 515033625357.\n# … with 274 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n### `group_by` y `summarise`\n\nUna operación común que vamos a querar hacer con una tabla es calcular estadisticas. Por ejemplo, el promedio de ciertas columnas o aun mas, agrupar por caracteristicas y luego calcular el promedio. Esto lo podemos hacer utilizando el comando `group_by`, el cual nos permite agrupar los resultados de una tabla en función de los valores de una o mas columnas. Esto lo podemos combinar con `summarise`, para calcular valores en base al resultado de esa agrupación. Por ejemplo, calculemos el promedio (`mean`) y la desviación estandar (`sd`) de las poblaciones por continente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_continent_2007 <- gapminder %>%\n    filter(year == 2007)  %>%\n    group_by(continent) %>%\n    summarise(pop_promedio = mean(pop),\n              pop_dev = sd(pop),\n              gdp_promedio = mean(gdpPercap))\n\npop_continent_2007\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  continent pop_promedio    pop_dev gdp_promedio\n  <chr>            <dbl>      <dbl>        <dbl>\n1 Africa       17875763.  24917726.        3089.\n2 Americas     35954847.  68833781.       11003.\n3 Asia        115513752. 289673399.       12473.\n4 Europe       19536618.  23624744.       25054.\n5 Oceania      12274974.  11538855.       29810.\n```\n:::\n:::\n\n\nEl comando `summarise` entrega una nueva tabla resumida. Si solo queremos agregar una nueva columna en base al resultado del agrupamiento, podemos ocupar `mutate`. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npctPop_table <- gapminder %>%\n    group_by(continent, year) %>%\n    mutate(pctPop = pop / sum(pop) * 100)\n\npctPop_table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n# Groups:   continent, year [60]\n   country     continent  year lifeExp      pop gdpPercap pctPop\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>  <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  0.604\n 2 Afghanistan Asia       1957    30.3  9240934      821.  0.591\n 3 Afghanistan Asia       1962    32.0 10267083      853.  0.605\n 4 Afghanistan Asia       1967    34.0 11537966      836.  0.605\n 5 Afghanistan Asia       1972    36.1 13079460      740.  0.608\n 6 Afghanistan Asia       1977    38.4 14880372      786.  0.624\n 7 Afghanistan Asia       1982    39.9 12881816      978.  0.494\n 8 Afghanistan Asia       1987    40.8 13867957      852.  0.483\n 9 Afghanistan Asia       1992    41.7 16317921      649.  0.521\n10 Afghanistan Asia       1997    41.8 22227415      635.  0.657\n# … with 1,694 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}