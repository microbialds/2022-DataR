{
  "hash": "0195627b3615cf6b600b62dd635f5c3c",
  "result": {
    "markdown": "---\ntitle: \"Introducción a R\"\n---\n\n\nEn esta primera clase, vamos a explorar brevemente el lenguaje de programación `R`, conocer algunas de sus características y generar una visualización a partir de una tabla!\n\n## Ejecutando comandos en R\n\nDesde la consola, es posible ejecutar comandos directamente. Por ejemplo podemos hacer operaciones aritmeticas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nTambien podemos generar números de manera secuencial\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nTodo esto lo estuvimos haciendo desde la consola, pero no es la manera mas habitual de trabajar, ni tampoco la mejor práctica. Lo ideal es trabajar todo desde un script (básicamente un archivo de texto), el cual nos permite documentar el trabajo realizado.\n\nPara crear un nuevo script, podemos ir al boton verde de la parte superior izquierda, y elegir la opción `R script`. Una vez que creamos un script, podemos ir dejando en ese documento los comandos que vamos a ir utilizando.\n\n## Elementos básicos en R\n\nEn R encontramos 4 tipos de datos atómicos con los cuales podemos crear vectores:\n\n-   numérico: enteros y reales\n\n        12\n        12.5\n\n-   caracteres\n\n        \"hola, soy un texto!\"\n\n-   lógicos\n\n        TRUE\n        FALSE\n\n-   complejos\n\n        1 + 3i\n\nTambién existen dos tipos especiales que se pueden mezclar con los anteriores, `NULL` para cuando no existe un valor (por ejemplo, para declarar una variable sin asignar un valor) y `NA` (not assigned) cuando no hay una observación en una tabla.\n\nEl uso de `NA` es importante, porque permite mezclarse con otros tipos. Cualquier calculo que involucre `NA` va a resultar en `NA`. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNA + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nEl resultado es `NA`, porque R no sabe cual es la respuesta. Esto es igual si queremos identificar el número máximo en una lista de números:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(10, 30, 5, NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nPero algunas funciones, pueden ignorar ese `NA` con el parametro adecuado. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(10, 30, 5, NA, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n:::\n\n\n## Asignación de variables\n\nLos resultados de las operaciones, calculos, etc, pueden ser guardados en variables para ser utilizados. Esto se hace con el operador `<-`. También es posible utilizar el operado `=`, pero en general se utiliza `<-`. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nejemplo <- 120\n```\n:::\n\n\nY ahora podemos llamar la variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nejemplo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n:::\n\n\nEs posible hacer operaciones directamente con las variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 100\ny <- 123\n\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 223\n```\n:::\n:::\n\n\n## Vectores\n\nUn vector es una coleccion ordenada de elementos, que pueden ser del mismo tipo o combinados. La función que se utiliza para generar los vectores es `c`. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,5,10,14,20)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  5 10 14 20\n```\n:::\n:::\n\n\nTambién es posible crear un vector de caracteres\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombres <- c(\"Francisco\", \"Andres\", \"Jorge\")\nnombres\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Francisco\" \"Andres\"    \"Jorge\"    \n```\n:::\n:::\n\n\ny combinar diferentes tipos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombinacion <- c(\"Andres\", 50, 1e10)\ncombinacion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Andres\" \"50\"     \"1e+10\" \n```\n:::\n:::\n\n\nPodemos acceder a los elementos individuales de un vector usando \\[\\] y el número del elemento. Es importante recordar que la númeracion parte desde 1 (versus Python, que parte desde 0).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombres[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Francisco\"\n```\n:::\n\n```{.r .cell-code}\nnombres[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Jorge\"\n```\n:::\n:::\n\n\nTambien podemos asignar nombres a los elementos de un vector. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeros <- c(1,2,3)\nlabel <- c(\"uno\", \"dos\", \"tres\")\n\nnames(numeros) <- label\n\nnumeros\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n uno  dos tres \n   1    2    3 \n```\n:::\n:::\n\n\nY podemos acceder por nombre:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeros[\"uno\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nuno \n  1 \n```\n:::\n:::\n\n\nincluso usando un vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeros[c(\"uno\", \"tres\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n uno tres \n   1    3 \n```\n:::\n:::\n\n\n## Lecturas recomendadas\n\n1.  Best practices for Writing R Code: [link](https://swcarpentry.github.io/r-novice-inflammation/06-best-practices-R/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}