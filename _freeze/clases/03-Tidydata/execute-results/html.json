{
  "hash": "1412ee34c8e0453a42f38eb78d573d23",
  "result": {
    "markdown": "---\ntitle: \"Organizando los datos (Tidydata)\"\n---\n\n\n# Introducción\n\nUno de los conceptos claves en el Tidyverse tiene que ver con la estructura de los datos que vamos a analizar, lo que se ha denominado *Tidy Data*. El poder estructurar los datos de esta forma nos permite trabajar de manera consistente con las librerias del Tidyverse y construir codigo que sea flexible, reproducible y ordenado. \n\nLa estructura de los datos consiste en que cada variable (o feature) tiene su propia columna. Cada observación esta en una fila, y cada celda contiene un solo valor o medición.\n\n![Figura de (https://r4ds.had.co.nz/tidy-data.html)](figuras/tidy-data-wickham.png)\n\nEn esta clase, vamos a explorar algunas tablas y ordenarlas para que tengan el formato necesario. Para ello vamos a ocupar el paquete `tidyr` (que es parte del `tidyverse`), el cual tiene algunas tablas de ejemplo.\n\n## Tablas a utilizar\n\nPrimero que nada, como hemos hecho en las clases anteriores, vamos a cargar en nuestro script la libreria `tidyverse`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nVamos a ocupar varias tablas que son parte de esta libreria y que van a servir de ejemplo. Las tablas: _table1_, _table2_, _table3_, _table4a_, _table4b_, _table5_.\n\nEl ejemplo de tabla idea, que tiene la estructura necesaria, es _table1_\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n## Ordenando tablas\n\n### `pivot_wider`\n\nEl primer comando que vamos a mirar es `pivot_wider`. Para entender bien lo que hace, veamos primero _table2_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <int> <chr>           <int>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n:::\n:::\n\n\nVemos que esta tabla esta organizada, pero no de la manera \"tidy\". En este caso la columna _type_ no es un caracteristica de los paises, si no que los resultados reales estan en la columnna count. Para poder convertir esta tabla en el formato necesario, tenemos que expandirla. Esto lo podemos hacer con `pivot_wider`.\n\nA la función `pivot_wider` le pasamos dos opciones:\n\n- _names_from_: indica la columna desde donde vamos a sacar los nombres de las nuevas columnas.\n- _values_from_: indica de donde vienen los valores para cada una de las nuevas columnas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2 %>%\n    pivot_wider(names_from = type,\n                values_from = count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n",
    "supporting": [
      "03-Tidydata_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}