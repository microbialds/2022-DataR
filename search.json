[
  {
    "objectID": "clases/index.html",
    "href": "clases/index.html",
    "title": "Preparandonos para el curso",
    "section": "",
    "text": "En este curso vamos a utilizar principalmente R y RStudio para nuestras clases. Si ya lo tienen instalado, mi recomendación es que actualicen a la última versión de RStudio, ya que además viene con Quarto (la otra herramientas que vamos a utilizar).\nNota para usuarios de MacOS\nAntes de instalar R, la recomendación es instalar primero Xcode y XQuartz.\n\n\nR se puede descargar desde la pagina del Comprehensive R Archive Network o CRAN. Desde ese lugar se puede descargar la version de R e instalar según su sistema operativo.\n\n\n\nEn la página de descarga de RStudio, elegir la versión según el sistema operativo que esten utilizando.\n\n\nTanto R como RStudio tiene paginas web en donde se pueden encontrar respuestas a algunas preguntas. En el caso de R estan “Frequently Asked Questions”(FAQ) de R, o para Windows R for Windows FAQ.\nOtra fuente de información son paginas web y foros como Stack Overflow RStudio community. Sin embargo, lo más probable es que tus dudas ya se encuentren resueltas en la web, asi que primero haz una búsqueda en Google usando palabras clave o copia y pega en el buscador el mensaje de error que te aparezca en la consola de R. Consejo: haz tus búsquedas y consultas en inglés, tendrás acceso a más y mejor información."
  },
  {
    "objectID": "clases/01-intro.html",
    "href": "clases/01-intro.html",
    "title": "Introducción a R",
    "section": "",
    "text": "En esta primera clase, vamos a explorar brevemente el lenguaje de programación R, conocer algunas de sus características y generar una visualización a partir de una tabla!"
  },
  {
    "objectID": "clases/01-intro.html#ejecutando-comandos-en-r",
    "href": "clases/01-intro.html#ejecutando-comandos-en-r",
    "title": "Introducción a R",
    "section": "Ejecutando comandos en R",
    "text": "Ejecutando comandos en R\nDesde la consola, es posible ejecutar comandos directamente. Por ejemplo podemos hacer operaciones aritmeticas\n\n1 + 1\n\n[1] 2\n\n\nTambien podemos generar números de manera secuencial\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nTodo esto lo estuvimos haciendo desde la consola, pero no es la manera mas habitual de trabajar, ni tampoco la mejor práctica. Lo ideal es trabajar todo desde un script (básicamente un archivo de texto), el cual nos permite documentar el trabajo realizado.\nPara crear un nuevo script, podemos ir al boton verde de la parte superior izquierda, y elegir la opción R script. Una vez que creamos un script, podemos ir dejando en ese documento los comandos que vamos a ir utilizando."
  },
  {
    "objectID": "clases/01-intro.html#elementos-básicos-en-r",
    "href": "clases/01-intro.html#elementos-básicos-en-r",
    "title": "Introducción a R",
    "section": "Elementos básicos en R",
    "text": "Elementos básicos en R\nEn R encontramos 4 tipos de datos atómicos con los cuales podemos crear vectores:\n\nnumérico: enteros y reales\n12\n12.5\ncaracteres\n\"hola, soy un texto!\"\nlógicos\nTRUE\nFALSE\ncomplejos\n1 + 3i\n\nTambién existen dos tipos especiales que se pueden mezclar con los anteriores, NULL para cuando no existe un valor (por ejemplo, para declarar una variable sin asignar un valor) y NA (not assigned) cuando no hay una observación en una tabla.\nEl uso de NA es importante, porque permite mezclarse con otros tipos. Cualquier calculo que involucre NA va a resultar en NA. Por ejemplo:\n\nNA + 1\n\n[1] NA\n\n\nEl resultado es NA, porque R no sabe cual es la respuesta. Esto es igual si queremos identificar el número máximo en una lista de números:\n\nmax(10, 30, 5, NA)\n\n[1] NA\n\n\nPero algunas funciones, pueden ignorar ese NA con el parametro adecuado. Por ejemplo:\n\nmax(10, 30, 5, NA, na.rm=TRUE)\n\n[1] 30"
  },
  {
    "objectID": "clases/01-intro.html#asignación-de-variables",
    "href": "clases/01-intro.html#asignación-de-variables",
    "title": "Introducción a R",
    "section": "Asignación de variables",
    "text": "Asignación de variables\nLos resultados de las operaciones, calculos, etc, pueden ser guardados en variables para ser utilizados. Esto se hace con el operador <-. También es posible utilizar el operado =, pero en general se utiliza <-. Por ejemplo:\n\nejemplo <- 120\n\nY ahora podemos llamar la variable\n\nejemplo\n\n[1] 120\n\n\nEs posible hacer operaciones directamente con las variables:\n\nx <- 100\ny <- 123\n\nx + y\n\n[1] 223"
  },
  {
    "objectID": "clases/01-intro.html#vectores",
    "href": "clases/01-intro.html#vectores",
    "title": "Introducción a R",
    "section": "Vectores",
    "text": "Vectores\nUn vector es una coleccion ordenada de elementos, que pueden ser del mismo tipo o combinados. La función que se utiliza para generar los vectores es c. Por ejemplo:\n\nx <- c(1,5,10,14,20)\nx\n\n[1]  1  5 10 14 20\n\n\nTambién es posible crear un vector de caracteres\n\nnombres <- c(\"Francisco\", \"Andres\", \"Jorge\")\nnombres\n\n[1] \"Francisco\" \"Andres\"    \"Jorge\"    \n\n\ny combinar diferentes tipos:\n\ncombinacion <- c(\"Andres\", 50, 1e10)\ncombinacion\n\n[1] \"Andres\" \"50\"     \"1e+10\" \n\n\nPodemos acceder a los elementos individuales de un vector usando [] y el número del elemento. Es importante recordar que la númeracion parte desde 1 (versus Python, que parte desde 0).\n\nnombres[1]\n\n[1] \"Francisco\"\n\nnombres[3]\n\n[1] \"Jorge\"\n\n\nTambien podemos asignar nombres a los elementos de un vector. Por ejemplo:\n\nnumeros <- c(1,2,3)\nlabel <- c(\"uno\", \"dos\", \"tres\")\n\nnames(numeros) <- label\n\nnumeros\n\n uno  dos tres \n   1    2    3 \n\n\nY podemos acceder por nombre:\n\nnumeros[\"uno\"]\n\nuno \n  1 \n\n\nincluso usando un vector\n\nnumeros[c(\"uno\", \"tres\")]\n\n uno tres \n   1    3"
  },
  {
    "objectID": "clases/01-intro.html#exploración-inicial-de-los-datos",
    "href": "clases/01-intro.html#exploración-inicial-de-los-datos",
    "title": "Introducción a R",
    "section": "Exploración inicial de los datos",
    "text": "Exploración inicial de los datos\nVamos a llamar a una tabla llamada penguins y asignarla a una variable.\n\ntabla_pinguinos <- penguins\n\ny podemos visualizar la tabla\n\ntabla_pinguinos\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "clases/01-intro.html#construir-un-gráfico",
    "href": "clases/01-intro.html#construir-un-gráfico",
    "title": "Introducción a R",
    "section": "Construir un gráfico",
    "text": "Construir un gráfico\nEl paquete que vamos a utilizar para visualizar se llama ggplot, el cual es parte de tidyverse. Así que ya esta instalado cuando hicimos la llamada a la libreria tidyverse al inicio.\n\nGráfico inicial\nPrimero vamos a construir un gráfico en el cual vamos a visualizar el largo de la aleta versus el largo del pico del pinguino.\n\nggplot(data = tabla_pinguinos,\n       aes(x=flipper_length_mm, \n           y=bill_length_mm)\n       ) +\ngeom_point()\n\nWarning: Removed 2 rows containing missing values (geom_point).\n\n\n\n\n\nEn este comando lo que estamos haciendo es:\n\ndefinir los datos a usar en data = tabla_pinguinos\ndefinir la estetica (aesthetics) del grafico, en este caso el eje X y el eje Y, que son columnas de la tabla: aes(x=flipper_length_mm, y=bill_length_mm)\ndefinir que queremos hacer con los datos. En este caso, dibujar puntos: geom_point()\n\n\n\nAgregar color y formas\nComo podemos diferencias variables dentro de nuestras columnas. Agregando en la opciones de estética del gráfico dos nuevas variables: color=species, shape=sex. En este caso, asignamos color en base a los elementos distintos de la columna species y forma de los puntos en base a la columna sex. Así, el código queda:\n\nggplot(data = tabla_pinguinos,\n       aes(x=flipper_length_mm, \n           y=bill_length_mm,\n           color = species,\n           shape = sex)\n       ) +\ngeom_point()\n\nWarning: Removed 11 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nCambiar color y diseño\nYa tenemos un gráfico inicial que muestra la comparación que nos interesa y ahora podemos editar para que se vea un poco mejor y no con los colores y diseño por defecto de R. Esto lo podemos hacer modificando el theme del gráfico. Mas adelante vamos a ver el detalle de como modificar diferentes componentes, pero por ahora podemos hacer un cambio general agregando el comando theme_minimal().\nEn los colores, también los podemos modificar a gusto. Por el momento vamos a utilizar una paleta de colores diferente con el comando scale_color_brewer(type = \"qual\"). En este caso le pasamos como parametro al comando scale_color_brewer la opción type = “qual”. Con esto definimos que la escala de colores es cualitativa (versus una escala cuantitativa).\nAsí el comando nos queda ahora como:\n\nggplot(data = tabla_pinguinos,\n       aes(x=flipper_length_mm, \n           y=bill_length_mm,\n           color = species,\n           shape = sex)\n       ) +\ngeom_point() +\ntheme_minimal() +\nscale_color_brewer(type=\"qual\")\n\nWarning: Removed 11 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nAgregar leyendas y cambiar texto\nFinalmente, vamos a cambiar el texto que describe los ejes X e Y, y agregar algo de texto informativo.\nEsto lo vamos a hacer agregando el comando labs y definiendo las diferentes opciones:\nlabs(x=\"Flipper length (mm)\",\n     y=\"Bill length (mm)\",\n     title = \"Penguin data comparison\",\n     subtitle = \"Comparison between flipper length and bill length in a penguin population\",\n     caption = \"Data obtained from the package palmerpenguins\"\nY podemos agregarlo al gráfico.\n\nggplot(data = tabla_pinguinos,\n       aes(x=flipper_length_mm, \n           y=bill_length_mm,\n           color = species,\n           shape = sex)\n       ) +\ngeom_point() +\ntheme_minimal() +\nscale_color_brewer(type=\"qual\") +\nlabs(x=\"Flipper length (mm)\",\n     y=\"Bill length (mm)\",\n     title = \"Penguin data comparison\",\n     subtitle = \"Comparison between flipper length and bill length in a penguin population\",\n     caption = \"Data obtained from the package palmerpenguins\")\n\nWarning: Removed 11 rows containing missing values (geom_point)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Temas que veremos en este curso:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DataViz 2022",
    "section": "",
    "text": "Bienvenid@s al curso de análisis y visualización de datos usando R, Tidyverse y Quarto.\nEn la parte superior derecha de esta página encontraran el link al material de las clases y las tareas que iremos trabajando cada semana.\nOJO Antes de nuestra primera clase el próximo Martes 16, es necesario que traigan instalado en sus computadores R, Rstudio y las librerias que vamos a utilizar. Mas información la pueden encontrar aqui, en la sección de pre-requisitos.\n\nProfesor\n\n   Juan A. Ugalde\n   juan.ugalde@unab.cl\n\n\n\nDetalles del curso\n\n   Martes, 9:25 am - 11:05 am\n   Sala de seminarios CBIB"
  }
]